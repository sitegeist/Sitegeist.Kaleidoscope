prototype(Sitegeist.Kaleidoscope:Image) < prototype(Neos.Fusion:Component) {

    @styleguide {
        props {
            imageSource = Sitegeist.Kaleidoscope:DummyImageSource
        }

        propSets {
            altAndTitleFromSource {
                imageSource = Sitegeist.Kaleidoscope:DummyImageSource {
                    alt = 'Alternate assigned to source'
                    title = 'Title assigned to source'
                }
            }

            imageSourceWithWidth {
              imageSource = Sitegeist.Kaleidoscope:DummyImageSource {
                @process.adjust = ${value.withWidth(400)}
              }
            }

            imageSourceWithHeight {
              imageSource = Sitegeist.Kaleidoscope:DummyImageSource {
                @process.adjust = ${value.withHeight(400)}
              }
            }

            imageSourceWithDimensions {
              imageSource = Sitegeist.Kaleidoscope:DummyImageSource {
                @process.adjust = ${value.withDimensions(400, 400)}
              }
            }

            imageSourceWithTitleAndAlt {
              imageSource = Sitegeist.Kaleidoscope:DummyImageSource {
                @process.adjust = ${value.withAlt("Alternate assigned by eel").withTitle("Title assigned by eel")}
              }
            }

            imageSourceWithFormat {
              imageSource = Sitegeist.Kaleidoscope:DummyImageSource {
                @process.adjust = ${value.withFormat("png")}
              }
            }

            overrideAltAndTitleFromProp {
                alt = 'Alternate assigned as prop'
                title = 'Title assigned as prop'
            }

            withResourceImageSource {
                imageSource = Sitegeist.Kaleidoscope:ResourceImageSource {
                    path = "resource://Sitegeist.Kaleidoscope/Public/Images/imageError.png"
                    alt = 'Alternate assigned to source'
                    title = 'Title assigned to source'
                }
            }

            withUriImageSource {
                imageSource = Sitegeist.Kaleidoscope:UriImageSource {
                    uri = "https://dummyimage.com/600x400/000/fff"
                    alt = 'Alternate assigned to source'
                    title = 'Title assigned to source'
                }
            }

            withAttributes {
              attributes = Neos.Fusion:DataStructure {
                data-foo="bar"
                style="border: 5px solid pink;"
              }
            }

            multires_array {
                srcset = ${['1x', '1.5x', '2x']}
            }

            multires_string {
                srcset = '1x, 1.5x, 2x'
            }

            multisize_array {
                srcset = ${['320w', '400w', '600w', '800w', '1000w', '1200w', '1600']}
            }

            multisize_string {
                srcset = '320w, 400ww, 600w, 800w, 1000w, 1200w, 1600'
            }

            sizes_array {
                srcset = ${['320w', '400w', '600w', '800w', '1000w', '1200w', '1600']}
                sizes = ${['(max-width: 320px) 280px', '(max-width: 480px) 440px', '800px']}
            }

            sizes_string {
                srcset = '320w, 400ww, 600w, 800w, 1000w, 1200w, 1600'
                sizes = '(max-width: 320px) 280px, (max-width: 480px) 440px, 800px'
            }

            nonScalabelSource {
                imageSource = Sitegeist.Kaleidoscope:UriImageSource {
                    uri = "https://dummyimage.com/600x400/000/fff"
                    alt = 'Alternate assigned to source'
                    title = 'Title assigned to source'
                }
                srcset = '320w, 400ww, 600w, 800w, 1000w, 1200w, 1600'
                sizes = '(max-width: 320px) 280px, (max-width: 480px) 440px, 800px'
            }
        }
    }

    @propTypes {
        imageSource = ${PropTypes.instanceOf('\\Sitegeist\\Kaleidoscope\\Domain\\ImageSourceInterface')}
    }

    imageSource = null
    srcset = null
    sizes = null
    alt = null
    title = null
    // class is deprecated in favor of attributes.class
    class = null
    loading = 'lazy'
    width = null
    height = null
    format = null
    quality = null
    attributes = Neos.Fusion:DataStructure
    renderDimensionAttributes = true

    @private {
        # detect scalable sources
        isScalableSource = ${props.imageSource && Type.instance(props.imageSource, '\\Sitegeist\\Kaleidoscope\\Domain\\ScalableImageSourceInterface')}

        # apply format, width and height to the imageSource
        imageSource = ${props.imageSource}
        imageSource.@if.hasImageSource = ${props.imageSource && Type.instance(props.imageSource, '\\Sitegeist\\Kaleidoscope\\Domain\\ImageSourceInterface')}
        imageSource.@process.applyDimensions = ${(props.width && props.height) ? value.withDimensions(props.width, props.height) : value}
        imageSource.@process.applyWidth = ${(props.width && !props.height) ? value.withWidth(props.width) : value}
        imageSource.@process.applyHeight = ${(props.height && !props.width) ? value.withHeight(props.height) : value}
        imageSource.@process.applyFormat = ${props.format ? value.withFormat(props.format) : value}
        imageSource.@process.applyQuality = ${props.quality ? value.withQuality(props.quality) : value}
    }

    renderer = afx`
        <img
            @if={private.imageSource}
            src={private.imageSource.src()}
            srcset={private.imageSource.srcset(props.srcset)}
            srcset.@if.isScalable={private.isScalableSource && props.srcset}
            sizes={props.sizes}
            sizes.@if.isScalable={private.isScalableSource && props.sizes}
            sizes.@process.join={Type.isArray(value) ? Array.join(value, ', ') : value}
            loading={props.loading}
            class={props.class}
            alt={props.alt || private.imageSource.alt() || ''}
            title={props.title || private.imageSource.title()}
            width={props.renderDimensionAttributes ? private.imageSource.width() : null}
            height={props.renderDimensionAttributes ? private.imageSource.height() : null}
            {...props.attributes}
        />
    `
}
