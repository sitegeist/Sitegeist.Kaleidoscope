prototype(Sitegeist.Kaleidoscope:Source) < prototype(Neos.Fusion:Component) {

    @propTypes {
        imageSource = ${PropTypes.instanceOf('\\Sitegeist\\Kaleidoscope\\Domain\\ImageSourceInterface')}
    }

    imageSource = null
    imageSource.@process.contextFallback = ${value || __imageSource}

    srcset = null
    srcset.@process.contextFallback = ${value || __srcset}

    sizes = null
    sizes.@process.contextFallback = ${value || __sizes}

    width = null
    width.@process.contextFallback = ${value || __width}

    height = null
    height.@process.contextFallback = ${value || __height}

    format = null
    format.@process.contextFallback = ${value || __format}

    type = null
    media = null
    renderDimensionAttributes = true

    @private {
        isScalableSource = ${props.imageSource && Type.instance(props.imageSource, '\\Sitegeist\\Kaleidoscope\\Domain\\ScalableImageSourceInterface')}

        imageSource = ${props.imageSource}
        imageSource.@if.hasImageSource = ${props.imageSource && Type.instance(props.imageSource, '\\Sitegeist\\Kaleidoscope\\Domain\\ImageSourceInterface')}
        imageSource.@process.applyDimensions = ${(width && height) ? value.withDimensions(width, height) : value}
        imageSource.@process.applyWidth = ${(width && !height) ? value.withWidth(width) : value}
        imageSource.@process.applyHeight = ${(height && !width) ? value.withHeight(height) : value}
        imageSource.@process.applyFormat = ${format ? value.withFormat(format) : value}

        type = ${props.format ? 'image/' + props.format : props.type}
    }

    renderer = afx`
        <source @if.has={private.imageSource}
            srcset={private.imageSource.srcset(props.srcset)}
            sizes={props.sizes}
            sizes.@if.isScalable={props.sizes && private.isScalableSource}
            sizes.@process.join={Type.isArray(value) ? Array.join(value, ', ') : value}
            type={private.type}
            media={props.media}
            width={props.renderDimensionAttributes ? private.imageSource.currentWidth : null}
            height={props.renderDimensionAttributes ? private.imageSource.currentHeight : null}
        />
    `
}
